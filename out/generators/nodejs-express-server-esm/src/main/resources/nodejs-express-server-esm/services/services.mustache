/* eslint-disable no-unused-vars */
import Service from './Service.js'
import logger from '../logger.js'

import * as api_impl from '../api_impl/index.js'

{{#operations}}
{{#operation}}
/**
{{#summary}}
    * {{{summary}}}
{{/summary}}
{{#notes}}
    * {{{notes}}}
{{/notes}}
    *
    * @param (Object) request_params - The request params for this operation
{{#allParams}}
    * @param ({{dataType}}) request_params.{{paramName}} - {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
    *
{{^returnType}}
    * no response value expected for this operation
{{/returnType}}
{{#returnType}}
    * returns {{{returnType}}}
{{/returnType}}
**/
export const {{{operationId}}} = ({headers}, request_params) => new Promise((resolve, reject) => {
    /* Do not use an async function in the promise, but we can define one here */
    const execApi = async () => {
        try {
            let params = {
                ...request_params,
                headers
            }
            let response = await api_impl.{{operationId}}(params)
            resolve(Service.successResponse(response.payload, response.code))
        } catch (e) {
            reject(Service.rejectResponse(
                e.error || e.message || e.payload || 'Invalid API Input',
                e.code || e.status || 405,
            ))
        }
    }
    /* Call the async function now, which can use await */
    execApi()
})
{{/operation}}
{{/operations}}

